/**********************************************************************
  Module: console.h
  Author: Daniel Rea

  Purpose: Draw 2d images on the screen.  Also, draw main game image.

  NOTES: none of these functions are re-entrant (they are not thread
	 		safe). 
**********************************************************************/
#ifndef CONSOLE_H
#define CONSOLE_H
#define _GNU_SOURCE

#include <stdbool.h>

/**************** DRAWING **************************/

/* directions in terms of deltas in x / y dimension */
#define LEFT -1
#define RIGHT 1
#define UP -1
#define DOWN 1

#define SCR_LEFT 0
#define SCR_TOP 0

/* Initialize curses, draw initial gamescreen. Refreshes console to terminal. 
 Also stores the requested dimensions of the consoe and tests the terminal for the
 given dimensions.*/
extern bool consoleInit(int reqHeight, int reqWidth, char *image[]);

/* Draws 2d `image' of `height' rows, at curses coordinates `(row, col)'.
   Note: parts of the `image' falling on negative rows are not drawn; each
   row drawn is clipped on the left and right side of the game console (note
   that `col' may be negative, indicating `image' starts to the left of the
   screen and will thus only be partially drawn. Useful for objects that are
   half off the screen  */
extern void consoleDrawImage(int row, int col, char *image[], int height);

/* Clears a 2d `width'x`height' rectangle with spaces.  Upper left hand
   corner is curses coordinate `(row,col)'. */
extern void consoleClearImage(int row, int col, int height, int width);

/* Moves cursor to bottom right corner and refreshes. If this is not done,
   the curses internal buffer (that you have been drawing to) is not dumped
   to screen. */
extern void consoleRefresh(void);

/*  turns off all updates. Can be used to prevent the screen refresh from working, e.g., at game end while threads are all catching up.*/
extern void disableConsole(int disabled);

/* Terminates curses cleanly. */
extern void consoleFinish(void);

/* Puts the given banner in the center of the screen */
void putBanner(const char *);

/* Draws the given string at the given location  */
void putString(char *, int row, int col, int maxlen);

/* Sleeps the given number of 20ms ticks */
void sleepTicks(int ticks);

/* clears the input buffer and then waits for one more key */
void finalKeypress();

/* gets a timespec that represents the time of one tick */
struct timespec getTimeout(int ticks);

#endif /* CONSOLE_H */
/**********************************************************************
  Module: constants.h
  Author: Alex Taylor
**********************************************************************/
#ifndef CONSTANTS_H
#define CONSTANTS_H

#define MOVE_LEFT 'a'
#define MOVE_RIGHT 'd'
#define MOVE_UP 'w'
#define MOVE_DOWN 's'
#define SHOOT ' '
#define QUIT 'q'
#define NUM_THREADS 4
#define GAME_ROWS 24
#define GAME_COLS 80

#endif
/**********************************************************************
  Module: threadManager.h
  Author: Alex taylor
**********************************************************************/

#ifndef THREADMANAGER_H
#define THREADMANAGER_H

void startThreads();

#endif /* CONSOLE_H */
/**********************************************************************
  Module: console.c
  Author: Daniel Rea

  Purpose: see console.h
  DO NOT MODIFY THIS CODE
  In fact, you probably shouldn't be reading any of this, but it may be useful to see.

  NOTES: none
**********************************************************************/

#include "console.h"
#include <curses.h>
#include <string.h>
#include <time.h>        /*for nano sleep */


static int CON_WIDTH, CON_HEIGHT;
static int consoleLock = false;
static int MAX_STR_LEN = 256; /* for strlen checking */

/* Local functions */

static bool checkConsoleSize(int reqHeight, int reqWidth)
{

	if ( (reqWidth > COLS) || (reqHeight > LINES) )
 	{
    		fprintf(stderr, "\n\n\rSorry, your window is only %ix%i. \n\r%ix%i is required. Sorry.\n\r", COLS, LINES, reqWidth, reqHeight);
    		return (false);
  	}

  return(true);
}

bool consoleInit(int height, int width, char *image[])  /* assumes image height/width is same as height param */
{
	bool status;

	initscr();
	crmode();
	noecho();
	clear();

	CON_HEIGHT = height;  CON_WIDTH = width;
	status = checkConsoleSize(CON_HEIGHT, CON_WIDTH);

	if (status)
	{
		consoleDrawImage(0, 0, image, CON_HEIGHT);
		consoleRefresh();
	}

	return(status);
}

void consoleDrawImage(int row, int col, char *image[], int height)
{
	int i, length;
	int newLeft, newRight, newOffset, newLength;

	if (consoleLock) return;

	newLeft  = col < 0 ? 0 : col;
	newOffset = col < 0 ? -col : 0;

	for (i = 0; i < height; i++)
	{
		if (row+i < 0 || row+i >= CON_HEIGHT)
			continue;
		length = strnlen(image[i], MAX_STR_LEN);
		newRight = col+length >= CON_WIDTH ? CON_WIDTH-1 : col+length;
		newLength = newRight - newLeft + 1;
		if (newOffset >= length || newLength <= 0)
		  continue;

			//Needed to disable the print statement. Unsure why it throws error.
		if (mvaddnstr(row+i, newLeft, image[i]+newOffset, newLength) == ERR);
			//fprintf(stderr, "ERROR drawing to screen"); /* smarter handling is needed */
	}
}

void consoleClearImage(int row, int col, int height, int width)
{
	int i, j;
	if (consoleLock) return;

	if (col+width > CON_WIDTH)
		width = CON_WIDTH-col;
	if (col < 0)
	{
		width += col; /* -= -col */
		col = 0;
	}

	if (width < 1 || col >= CON_WIDTH) /* nothing to clear */
		return;

	for (i = 0; i < height; i++)
	{
		if (row+i < 0 || row+i >= CON_HEIGHT)
			continue;
		move(row+i, col);
		for (j = 0; j < width; j++)
	    		addch(' ');
	}
}

void consoleRefresh(void)
{
	if (!consoleLock)
	{
	    move(LINES-1, COLS-1);
	    refresh();
	}
}

void consoleFinish(void)
{
    endwin();
}

void putBanner(const char *str)
{
  if (consoleLock) return;
  int len;

  len = strnlen(str,MAX_STR_LEN);

  move (CON_HEIGHT/2, (CON_WIDTH-len)/2);
  addnstr(str, len);

  consoleRefresh();
}

void putString(char *str, int row, int col, int maxlen)
{
  if (consoleLock) return;
  move(row, col);
  addnstr(str, maxlen);
}


/* setup to work in USECS, reduces risk of overflow */
/* 10000 usec = 10 ms, or 100fps */
#define TIMESLICE_USEC 10000
#define TIME_USECS_SIZE 1000000
#define USEC_TO_NSEC 1000
struct timespec getTimeout(int ticks)
{
  struct timespec rqtp;

  /* work in usecs at first */
  rqtp.tv_nsec = TIMESLICE_USEC * ticks;

  /* handle usec overflow */
  rqtp.tv_sec = rqtp.tv_nsec / TIME_USECS_SIZE;
  rqtp.tv_nsec %= TIME_USECS_SIZE;

  rqtp.tv_nsec *= USEC_TO_NSEC;  /*convert to nsecs */
  return rqtp;
}

void sleepTicks(int ticks)
{

  if (ticks <= 0)
    return;

  struct timespec rqtp = getTimeout(ticks);
  nanosleep(&rqtp, NULL);
}

#define FINAL_PAUSE 2
void finalKeypress()
{
	flushinp();
	sleepTicks(FINAL_PAUSE);
    	move(LINES-1, COLS-1);
	getch(); /* wait for user to press a character, blocking. */
}

void disableConsole(int disabled)
{
	consoleLock = disabled;
}

#include <stdio.h>
#include "threadManager.h"

int main(int argc, char**argv)
{
	startThreads();
	printf("done!\n");
}
/**********************************************************************
  Module: threadManager.c
  Author: Alex Taylor

**********************************************************************/

#include "threadManager.h"
#include <pthread.h>
#include "constants.h"
#include <stdio.h>
#include "console.h"
#include <stdbool.h>
#include <stdlib.h>
#include <sys/time.h>
#include <unistd.h>
#include <sys/select.h>
#include <string.h>

char *GAME_BOARD[] = {
"                   Score:          Lives:",
"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-centipiede!=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"",
"",
"",
"",
"",
"",
"" };

char* PLAYER_BODY[4][2] =
{
  {"|",
   "|"},
  {"|",
   "/"},
  {"|",
   "-"},
  {"|",
   "\\"}
};

char* ENEMY_L[4][1] =
{{"0~~~~~~~--"},
{"o~--~~~~~~"},
{"0~~~--~~~~"},
{"o~~~~~--~~"}};

char* ENEMY_R[4][1] =
{{"~~~~~~~--0"},
{"~--~~~~~~o"},
{"~~~--~~~~0"},
{"~~~~~--~~o"}};

char* BULLET_ANIMATE[1] =
{"|"};

//Global game running variable
bool gameRunning = true;

//Mutex variables
pthread_mutex_t playerLock;
pthread_mutex_t caterpillarLock;
pthread_mutex_t screenLock;
pthread_mutex_t runningLock;
pthread_mutex_t statsLock;

//Global Variables
int pRow = 20;
int pCol = 40;
int playerAnim = 0;
int score = 0;
int lives = 4;

//Thread Functions
void *playerFunc();
void *keyboardFunc();
void *redrawFunc();
void *caterpillarMainFunc();
void *indivCaterpillarFunc();
void *bulletMoveFunc();
void checkThread();

//Starts all of the threads and creates the mutexes
void startThreads()
{
  //Creates the mutexes
  if (consoleInit(GAME_ROWS, GAME_COLS, GAME_BOARD))
  {
    pthread_mutex_init(&playerLock, NULL);
    pthread_mutex_init(&screenLock, NULL);
    pthread_mutex_init(&runningLock, NULL);
    pthread_mutex_init(&caterpillarLock, NULL);
    pthread_mutex_init(&statsLock, NULL);
  }

  pthread_t threads[NUM_THREADS];

  //Player Thread
  int returnCode = pthread_create(&threads[0], NULL, playerFunc, NULL);
  checkThread(returnCode, "Player");

  //Keyboard Thread
  returnCode = pthread_create(&threads[1], NULL, keyboardFunc, NULL);
  checkThread(returnCode, "Keyboard");

  //Redraw Thread
  returnCode = pthread_create(&threads[2], NULL, redrawFunc, NULL);
  checkThread(returnCode, "Redraw");

  //Main Caterpillar Thread
  returnCode = pthread_create(&threads[3], NULL, caterpillarMainFunc, NULL);
  checkThread(returnCode, "Main Caterpillar");

  //Join Threads
  int i;
  for(i = 0; i < NUM_THREADS; i++)
  {
    returnCode = pthread_join(threads[i], NULL);
  }
  //Destroy the mutexes
  pthread_mutex_destroy(&playerLock);
  pthread_mutex_destroy(&screenLock);
  pthread_mutex_destroy(&runningLock);
  pthread_mutex_destroy(&caterpillarLock);
  pthread_mutex_destroy(&statsLock);
}

//Thread for the player animation
void *playerFunc()
{
  while(gameRunning)
  {
    char** tile = PLAYER_BODY[playerAnim];

    pthread_mutex_lock(&playerLock);
    pthread_mutex_lock(&screenLock);
    consoleClearImage(pRow, pCol, 2, 1);
    consoleDrawImage(pRow, pCol, tile, 2);
    pthread_mutex_unlock(&screenLock);
    //Iterate through the player animations
    playerAnim++;
    playerAnim = playerAnim%4;
    pthread_mutex_unlock(&playerLock);
    sleepTicks(20);

  }
  pthread_exit(NULL);
}

//Checks the keyboard Input
//Will move player, shoot bullet, and quit
void *keyboardFunc()
{
  fd_set set;
  while(gameRunning)
  {
    FD_ZERO(&set);
    FD_SET(STDIN_FILENO, &set);
    struct timespec timeout = getTimeout(1); /* duration of one tick */
    int ret = pselect(FD_SETSIZE, &set, NULL, NULL, &timeout, NULL);
    if (ret >= 1)
    {
      char c = getchar();

      pthread_mutex_lock(&playerLock);
      char** tile = PLAYER_BODY[playerAnim];
      pthread_mutex_lock(&screenLock);
      consoleClearImage(pRow, pCol, 2, 1);
      pthread_mutex_unlock(&screenLock);

      if (c == MOVE_LEFT && pCol > 0) {
        pCol-= 1;
      } else if (c == MOVE_RIGHT && pCol < 79) {
        pCol+= 1;
      } else if (c == MOVE_DOWN && pRow < 22) {
        pRow+= 1;
      } else if (c == MOVE_UP && pRow > 17) {
        pRow-= 1;
      }
      //Quits the game
      else if (c == QUIT) {
        pthread_mutex_lock(&runningLock);
        gameRunning = false;
        pthread_mutex_lock(&screenLock);
        consoleFinish();
        putBanner("Game Finished");
        finalKeypress();
        pthread_mutex_unlock(&screenLock);
        pthread_mutex_unlock(&runningLock);
      }
      //Shoots from current player position
      else if(c == SHOOT)
      {
        pthread_t thread;
        int* coords = (int*)malloc((3)*sizeof(int));
        coords[0] = pRow;
        coords[1] = pCol;
        coords[2] = 1;
        int returnCode = pthread_create(&thread, NULL, bulletMoveFunc, (void*)coords);
        checkThread(returnCode, "Bullet Move");
      }
      pthread_mutex_lock(&screenLock);
      consoleDrawImage(pRow, pCol, tile, 2);
      pthread_mutex_unlock(&screenLock);
      pthread_mutex_unlock(&playerLock);
    }
  }
  pthread_exit(NULL);
}

//Redraws the screenLock
//Would also write the current score and lives
void *redrawFunc()
{
  while(gameRunning)
  {
    pthread_mutex_lock(&statsLock);
    pthread_mutex_lock(&screenLock);
    putString("000000", 0, 26, 5);
    putString("4", 0, 42, 1);
    pthread_mutex_unlock(&statsLock);
    consoleRefresh();
    pthread_mutex_unlock(&screenLock);
    sleepTicks(1);
  }
  pthread_exit(NULL);
}

//The main caterpillar function. Creates first caterpillar.
//Would also create a new caterpillar every once in a while
//Would also create a bullet at the head of a random caterpillar at random times
void *caterpillarMainFunc()
{

  pthread_t caterpillars[1];
  int returnCode = pthread_create(&caterpillars[0], NULL, indivCaterpillarFunc, NULL);
  checkThread(returnCode, "Caterpillar");
  while(gameRunning)
  {
    pthread_join(caterpillars[0], NULL);
  }
  pthread_exit(NULL);
}

//Create and move an individual caterpillar
//Will move from side to side until it gets to the bottom of the
//caterpillar part of screen.
void *indivCaterpillarFunc()
{
  int cRow = 2;
  int cCol = 80;
  int j = 0;
  int size = strlen(ENEMY_L[j][0]);
  while(gameRunning && cRow < 15)
  {
    pthread_mutex_lock(&caterpillarLock);
    pthread_mutex_lock(&screenLock);

    //Draw caterpillar going to the left
    consoleClearImage(cRow, cCol, 1, size + 5);
    consoleDrawImage(cRow, cCol, ENEMY_L[j], 1);
    //Draw caterpillar going to the right
    if(cCol < 0)
    {
      consoleClearImage(cRow + 1, abs(cCol) - size - 5, 1, size + 5);
      consoleDrawImage(cRow + 1, abs(cCol) - size, ENEMY_R[j], 1);
    }
    //Reset the column after going left and then right fully
    if(cCol < -80)
    {
      consoleClearImage(cRow + 1, abs(cCol) - size - 5, 1, size + 5);
      cCol = 80;
      cRow += 2;
    }

    pthread_mutex_unlock(&screenLock);
    //Iterate through caterpillar animation
    j++;
    j = j%4;
    //Iterate through columns
    cCol = (cCol - 1);
    pthread_mutex_unlock(&caterpillarLock);
    sleepTicks(15);
  }
  pthread_exit(NULL);
}

//Creates a bullet at specified coordinates and moves either up or down.
//Input is {row, column, up/down(1 for up, otherwise down)}
void *bulletMoveFunc(void* coords)
{
  int* coordinates = (int*) coords;

  int i = coordinates[0];
  bool continueMoving = true;
  while(continueMoving && gameRunning)
  {
    //Move upwards
    if(coordinates[2] == 1)
    {
      i--;
      continueMoving = i > 2;
    }
    //Move downwards
    else
    {
      i++;
      continueMoving = i < 24;
    }

    //Draw bullet
    pthread_mutex_lock(&screenLock);

    consoleClearImage(i, coordinates[1], 2, 1);
    consoleDrawImage(i, coordinates[1], BULLET_ANIMATE, 1);

    pthread_mutex_unlock(&screenLock);
    sleepTicks(15);
  }
  //Clean up bullet
  pthread_mutex_lock(&screenLock);
  consoleClearImage(i, coordinates[1], 1, 2);
  pthread_mutex_unlock(&screenLock);
  free(coords);
  pthread_exit(NULL);
}

//Checks the thread return code to see if there was an error
void checkThread(int returnCode, char* threadName)
{
  if(returnCode)
  {
    printf("%s thread has encountered an ERROR: %d\n", threadName, returnCode);
  }
}
